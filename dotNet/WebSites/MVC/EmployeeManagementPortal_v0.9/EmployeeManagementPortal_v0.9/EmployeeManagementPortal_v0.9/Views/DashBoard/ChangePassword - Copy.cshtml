
@if (Session["UserId"] == null)
{
    Response.Redirect("~/Login/Index");
    return;
}

@model EmployeeManagementPortal_v0._8.Models.User

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ChangePassword</title>

    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script>


    </script>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>User</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @*@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })*@
                Old Password
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.LabelFor(model => model.ErrorMessage, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })*@
                New Password
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })*@
                Confirm New Password
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewRetypePassword, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Change Password" class="btn btn-default" />

                </div>
            </div>
            <div style="color:red">
                @Html.DisplayFor(m => m.ErrorMessage, "", new { htmlAttributes = new { style = "color:red" } })<br />
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })<br />
                @Html.ValidationMessageFor(model => model.NewRetypePassword, "", new { @class = "text-danger" })

            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "DashIndex")
    </div>
</body>
</html>
